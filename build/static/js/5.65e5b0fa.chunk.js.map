{"version":3,"sources":["chat/Message.js","chat/Chat.js","chat/utils.js"],"names":["Message","index","message","time","otherUserMsg","userName","classes","type","src","alt","style","height","messageBody","className","color","fontWeight","key","Chat","location","useState","userID","setUserID","messages","setMessages","setMessage","users","setUsers","emojiClicked","showPanel","socketRef","useRef","sendFile","e","data","reader","FileReader","onload","evt","msg","id","file","target","result","fileName","name","current","emit","readAsDataURL","readThenSendFile","files","useEffect","io","connect","state","on","oldMsgs","img","length","paddingRight","paddingLeft","map","user","s","charAt","toUpperCase","slice","padding","class","body","Date","toLocaleString","hour","minute","hour12","onEmojiClick","event","emojiObject","res","emoji","onSubmit","preventDefault","messageObject","title","aria-hidden","onChange","autoComplete","accept","autoFocus","placeholder","onClick","role","aria-labelledby","value"],"mappings":"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","file":"static/js/5.65e5b0fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Message = ({ index, message, time, otherUserMsg, userName, type }) => {\r\n  var classes = \"text-right\";\r\n  if (type === \"IMG\") {\r\n    message = <img src={message} alt=\"img\" style={{ height: \"100px\" }} />;\r\n  }\r\n\r\n  if (otherUserMsg) {\r\n     classes = \"text-left\";\r\n  }\r\n  let messageBody = (\r\n    <div className={otherUserMsg ? \"msg-bubble-right\" : \"msg-bubble-left\"}>\r\n      <div\r\n        className={\"small text-black \" + classes}\r\n        style={{ color: \"antiquewhite\", fontWeight: \"700\" }}\r\n      >\r\n        {userName}\r\n      </div>\r\n      <div className={\"text-small mb-0 text-white text-wrap \" + classes}>\r\n        {message}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (otherUserMsg) {\r\n    classes = \"text-right\";\r\n\r\n    return (\r\n      <div className=\"media  mb-1  message\" key={index}>\r\n        <div className=\"media-body ml-2\">\r\n          {messageBody}\r\n          <p className=\"small text-muted text-left\">{time}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"media ml-auto mb-1 message\" key={index}>\r\n      <div className=\"media-body mr-2 \">\r\n        {messageBody}\r\n        <p className=\"small text-muted text-right\">{time}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Picker from \"emoji-picker-react\";\r\n\r\nimport { getCurrentTime, capitalize } from \"./utils\";\r\nimport Message from \"./Message\";\r\n\r\nconst Chat = ({ location }) => {\r\n  const [userID, setUserID] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n  const [emojiClicked, showPanel] = useState(false);\r\n  const socketRef = useRef();\r\n\r\n  const sendEmoji = (event, emojiObject) => {\r\n    setMessage((res) => res + emojiObject.emoji);\r\n  };\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect(\"/\");\r\n    socketRef.current.emit(\"join\", location.state.userName);\r\n    setUserID(location.state.userName);\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    socketRef.current.on(\"received message\", (message) => {\r\n      setMessages((oldMsgs) => [...oldMsgs, message]);\r\n    });\r\n    socketRef.current.on(\"user-connected\", (users) => {\r\n      setUsers(users);\r\n    });\r\n    socketRef.current.on(\"base64 file\", (img) => {\r\n      setMessages((oldMsgs) => [...oldMsgs, img]);\r\n    });\r\n  }, []);\r\n\r\n  function sendMessage(e) {\r\n    e.preventDefault();\r\n    const messageObject = {\r\n      body: message,\r\n      id: userID,\r\n      type: \"Text\",\r\n    };\r\n    showPanel(false);\r\n    setMessage(\"\");\r\n    socketRef.current.emit(\"send message\", messageObject);\r\n  }\r\n\r\n  function sendFile(e) {\r\n    var data = e.target.files[0];\r\n    readThenSendFile(data);\r\n  }\r\n\r\n  function readThenSendFile(data) {\r\n    var reader = new FileReader();\r\n    reader.onload = function (evt) {\r\n      var msg = {};\r\n      msg.id = userID;\r\n      msg.file = evt.target.result;\r\n      msg.fileName = data.name;\r\n      msg.type = \"IMG\";\r\n      socketRef.current.emit(\"base64 file\", msg);\r\n    };\r\n    reader.readAsDataURL(data);\r\n  }\r\n\r\n  if (users.length === 0) {\r\n    return (\r\n      <div className=\"justify-center container-bgcolor jumbotron  join-chat\">\r\n        Please join the Chat Room\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container justify-center container-bgcolor\">\r\n      <div className=\"row mt-2\">\r\n        <div\r\n          className=\"col-md-4 background-white\"\r\n          style={{ paddingRight: 0, paddingLeft: 0 }}\r\n        >\r\n          <div className=\"activeUsers text-center font-weight-bold\">\r\n            Active Users\r\n          </div>\r\n          {users.map((user) => (\r\n            <div className=\"users\">ðŸ”µ {capitalize(user)} Joined the chat </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"col-md-8\" style={{ padding: 0 }}>\r\n          <h5 class=\"card-title text-right activeUsers\">{userID}</h5>\r\n          <div className=\"col-12 px-2 \">\r\n            <div\r\n              className=\"px-2 py-3 chat-box bg-white\"\r\n              style={{ height: 400 }}\r\n            >\r\n              {messages.map((msg, index) => {\r\n                return (\r\n                  <Message\r\n                    otherUserMsg={msg.id !== userID}\r\n                    userName={msg.id}\r\n                    message={msg.body}\r\n                    type={msg.type}\r\n                    index={index}\r\n                    time={getCurrentTime(\"-\")}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n            {emojiClicked ? <Picker onEmojiClick={sendEmoji} /> : \"\"}\r\n\r\n            <form onSubmit={sendMessage} class=\"bg-light p-2\">\r\n              <div class=\"input-group\">\r\n                <label class=\"custom-file-upload\">\r\n                  <i  title=\"send pics\" class=\"fa fa-upload\" aria-hidden=\"true\"></i>\r\n\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control rounded-0 border-0 py-4 bg-light\"\r\n                    onChange={(e) => sendFile(e)}\r\n                    autoComplete=\"off\"\r\n                    accept=\"image/*\"\r\n                    \r\n                    autoFocus=\"on\"\r\n                    placeholder=\"type your message here...\"\r\n                  />\r\n                </label>\r\n\r\n                <button\r\n                  onClick={() => showPanel(!emojiClicked)}\r\n                  id=\"clear\"\r\n                  type=\"button\"\r\n                  title=\"Emoji\"\r\n                  className=\"btn \"\r\n                >\r\n                  <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">\r\n                    &#128540;\r\n                  </span>\r\n                </button>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control rounded-0 border-1 py-4\"\r\n                  value={message}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                  autoComplete=\"off\"\r\n                  autoFocus=\"on\"\r\n                  placeholder=\"type your message here...\"\r\n                />\r\n                <div class=\"input-group-append\">\r\n                  <button type=\"submit\" className=\"btn btn-success\">\r\n                    <i class=\"fa fa-paper-plane\"\r\n                    aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","export function getCurrentTime() {\r\n  var time = new Date();\r\n\r\n  return time.toLocaleString(\"en-US\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  });\r\n}\r\n\r\n\r\nexport function capitalize (s) {\r\n  if (typeof s !== 'string') return ''\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}"],"sourceRoot":""}