{"version":3,"file":"static/js/779.4cec5889.chunk.js","mappings":"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","sources":["chat/ChatBox.js","chat/Sidebar.js","chat/utils.js","chat/Chat.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ChatBox = ({ index, message, time, otherUserMsg, userName, type }) => {\r\n  var classes = \"text-right\";\r\n  if (type === \"IMG\") {\r\n    message = <img src={message} alt=\"img\" style={{ height: \"100px\" }} />;\r\n  }\r\n\r\n  if (otherUserMsg) {\r\n    classes = \"text-left\";\r\n  }\r\n  let messageBody = (\r\n    <div className={otherUserMsg ? \"msg-bubble-right\" : \"msg-bubble-left\"}>\r\n      <div\r\n        className={\"small text-black \" + classes}\r\n        style={{ color: \"antiquewhite\", fontWeight: \"700\" }}\r\n      >\r\n        {userName}\r\n      </div>\r\n      <div className={\"text-small mb-0 text-white text-wrap \" + classes}>\r\n        {message}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (otherUserMsg) {\r\n    classes = \"text-right\";\r\n\r\n    return (\r\n      <div className=\"media  mb-1  message\" key={index}>\r\n        <div className=\"media-body ml-2\">\r\n          {messageBody}\r\n          <p className=\"small text-muted text-left\">{time}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"media ml-auto mb-1 message\" key={index}>\r\n      <div className=\"media-body mr-2 \">\r\n        {messageBody}\r\n        <p className=\"small text-muted text-right\">{time}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatBox);\r\n","import React from \"react\";\r\nimport { capitalize } from \"./utils\";\r\n\r\nconst Sidebar = ({ users, roomName }) => {\r\n  return (\r\n    <div className=\"bg-light-chat \" id=\"sidebar-wrapper\">\r\n      <div className=\"activeUsers text-center font-weight-bold\">\r\n        Active Users\r\n    </div>\r\n      <div className=\"list-group list-group-flush\">\r\n        <div className=\"users list-group-item list-group-item-action bg-roomname\">\r\n           {`Room : ${roomName}`}</div>\r\n        {users.map((user, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"users list-group-item list-group-item-action bg-light-chat\"\r\n          >\r\n            <div className=\"online\">\r\n              {user && user.charAt(0).toUpperCase()}\r\n            </div>\r\n            {capitalize(user)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sidebar;\r\n","export function getCurrentTime() {\r\n  var time = new Date();\r\n\r\n  return time.toLocaleString(\"en-US\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  });\r\n}\r\n\r\n\r\nexport function capitalize (s) {\r\n  if (typeof s !== 'string') return ''\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ReactGiphySearchbox from \"react-giphy-searchbox\";\r\n\r\nimport Picker from \"emoji-picker-react\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport { getCurrentTime } from \"./utils\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nconst Chat = ({ location }) => {\r\n  const [userID, setUserID] = useState();\r\n  const [roomName, setRoomName] = useState();\r\n  const [toggle, setToggle] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n  const [emojiClicked, showPanel] = useState(false);\r\n  const [gifClicked, setGifPanel] = useState(false);\r\n  const messagesEndRef = useRef(null)\r\n\r\n  const socketRef = useRef();\r\n  const { addToast } = useToasts();\r\n  let history = useHistory();\r\n\r\n  const sendEmoji = (event, emojiObject) => {\r\n    setMessage((res) => res + emojiObject.emoji);\r\n  };\r\n\r\n  const showToast = useCallback(\r\n    (msg) => {\r\n      addToast(msg, {\r\n        appearance: \"info\",\r\n        autoDismiss: true,\r\n      });\r\n    },\r\n    [addToast]\r\n  );\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect(\"/\");\r\n    socketRef.current.emit(\r\n      \"join\",\r\n      location.state.roomName,\r\n      location.state.userName\r\n    );\r\n    setUsers([location.state.userName]);\r\n    setUserID(location.state.userName);\r\n    setRoomName(location.state.roomName);\r\n  }, [location.state.userName, location.state.roomName]);\r\n\r\n  useEffect(() => {\r\n    socketRef.current.on(\"received message\", (message) => {\r\n      setMessages((oldMsgs) => [...oldMsgs, message]);\r\n    });\r\n\r\n    socketRef.current.on(\"user-connected\", (users) => {\r\n      setUsers(users);\r\n    });\r\n\r\n    socketRef.current.on(\"new-user-connected\", (userName) => {\r\n      showToast(`${userName} join the chat room `);\r\n    });\r\n\r\n    socketRef.current.on(\"image-share-received\", (img) => {\r\n      setMessages((oldMsgs) => [...oldMsgs, img]);\r\n    });\r\n\r\n    socketRef.current.on(\"user-disconnected\", (users, userName) => {\r\n      showToast(`${userName} left the chat room `);\r\n      setUsers(users);\r\n    });\r\n\r\n\r\n  }, [showToast]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  function sendMessage(e) {\r\n    e.preventDefault();\r\n    const messageObject = {\r\n      body: message,\r\n      id: userID,\r\n      type: \"Text\",\r\n    };\r\n    showPanel(false);\r\n    setMessage(\"\");\r\n    setMessages((oldMsgs) => [...oldMsgs, messageObject]);\r\n\r\n    socketRef.current.emit(\"send message\", roomName, messageObject);\r\n  }\r\n\r\n  function sendFile(e) {\r\n    var data = e.target.files[0];\r\n    readThenSendFile(data);\r\n  }\r\n  function toggleSidebar() {\r\n    setToggle(!toggle);\r\n  }\r\n  function leaveRoom() {\r\n    socketRef.current.emit(\"disconnect\");\r\n    history.push(\"/\");\r\n  }\r\n\r\n  function sendGif(item) {\r\n    console.log(item);\r\n    var msg = {};\r\n    msg.id = userID;\r\n    msg.body = item.images.preview_gif.url;\r\n    msg.fileName = item.type;\r\n    msg.type = \"IMG\";\r\n    setMessages((oldMsgs) => [...oldMsgs, msg]);\r\n    socketRef.current.emit(\"image-share\", roomName, msg);\r\n  }\r\n  function readThenSendFile(data) {\r\n    var reader = new FileReader();\r\n    reader.onload = function (evt) {\r\n      var msg = {};\r\n      msg.id = userID;\r\n      msg.body = evt.target.result.toString(\"base64\");\r\n      msg.fileName = data.name;\r\n      msg.type = \"IMG\";\r\n      setMessages((oldMsgs) => [...oldMsgs, msg]);\r\n\r\n      socketRef.current.emit(\"image-share\", roomName, msg);\r\n    };\r\n    reader.readAsDataURL(data);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      id=\"wrapper\"\r\n      className={toggle ? \" d-flex toggledright\" : \"container d-flex toggle\"}\r\n    >\r\n      <Sidebar users={users} roomName={roomName} />\r\n      <div id=\"page-content-wrapper\">\r\n        <nav className=\"navbar navbar-expand-md navbar-blue\">\r\n          <button\r\n            className=\"btn btn-default menuToggle\"\r\n            onClick={toggleSidebar}\r\n          >\r\n            <i className=\"text-white fa fa-bars\" aria-hidden=\"true\"></i>\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"navbar-toggler\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarCollapse\"\r\n          >\r\n            <i className=\"text-white fa fa-bars\" aria-hidden=\"true\"></i>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n            <div className=\"navbar-nav navbar-brand\">\r\n              <span className=\"nav-item text-white active title\">Fun2Chat</span>\r\n            </div>\r\n            <div className=\"navbar-nav ml-auto\">\r\n              <div className=\"font-weight-bold text-white activeUsers\">\r\n                {userID && userID.toUpperCase()}\r\n              </div>\r\n              <div\r\n                title=\"leave room\"\r\n                className=\"font-weight-bold text-white activeUsers\"\r\n              >\r\n                <i\r\n                  className=\"fa fa-sign-out\"\r\n                  onClick={leaveRoom}\r\n                  aria-hidden=\"true\"\r\n                ></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"container container-chat\">\r\n          <div className=\"col-12 px-2 \">\r\n            <div\r\n              className=\"px-2 py-3 chat-box bg-white\"\r\n              style={{ height: 400 }}\r\n            >\r\n              {messages.map((msg, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    <ChatBox\r\n                      otherUserMsg={msg.id !== userID}\r\n                      userName={msg.id}\r\n                      message={msg.body}\r\n                      type={msg.type}\r\n                      index={index}\r\n                      time={getCurrentTime(\"-\")}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n              <div ref={messagesEndRef} />\r\n\r\n            </div>\r\n            {emojiClicked ? <Picker onEmojiClick={sendEmoji} /> : \"\"}\r\n            {gifClicked ? (\r\n              <ReactGiphySearchbox\r\n                gifPerPage={30}\r\n                libray=\"stickers\"\r\n                gifListHeight=\"250px\"\r\n                masonryConfig={[\r\n                  { mq: \"320px\", columns: 3, imageWidth: 90, gutter: 2 },\r\n                  { mq: \"768px\", columns: 4, imageWidth: 100, gutter: 5 },\r\n                  { mq: \"1024px\", columns: 7, imageWidth: 100, gutter: 5 },\r\n                  { mq: \"1824px\", columns: 14, imageWidth: 100, gutter: 5 }\r\n                ]}\r\n                gifListHeight={200}\r\n                listWrapperClassName=\"es_listWrapper__etyrU\"\r\n                wrapperClassName=\"es_componentWrapper__1Y0JA\"\r\n                poweredByGiphy={false}\r\n                apiKey=\"CovmgqzY8DjIxJOhhjz4FAQds8SQIJKC\" // Required: get your on https://developers.giphy.com\r\n                onSelect={(item) => sendGif(item)}\r\n              />\r\n            ) : (\r\n                \"\"\r\n              )}\r\n            <div>\r\n              <form onSubmit={sendMessage} className=\"bg-light-chat p-2\">\r\n                <div className=\"input-group\">\r\n                  <label className=\"custom-file-upload\">\r\n                    <i\r\n                      title=\"send pics\"\r\n                      className=\"fa fa-upload\"\r\n                      aria-hidden=\"true\"\r\n                    ></i>\r\n\r\n                    <input\r\n                      type=\"file\"\r\n                      className=\"form-control rounded-0 border-0 py-4 bg-light-chat\"\r\n                      onChange={(e) => sendFile(e)}\r\n                      autoComplete=\"off\"\r\n                      accept=\"image/*\"\r\n                      autoFocus=\"on\"\r\n                      placeholder=\"type your message here...\"\r\n                    />\r\n                  </label>\r\n\r\n                  <button\r\n                    onClick={() => { setGifPanel(false); showPanel(!emojiClicked) }}\r\n                    id=\"clear\"\r\n                    type=\"button\"\r\n                    title=\"Emoji\"\r\n                    className=\"btn btn-emoji\"\r\n                  >\r\n                    <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">\r\n                      &#128540;\r\n                  </span>\r\n                  </button>\r\n                  <button\r\n                    onClick={() => {\r\n                      setGifPanel(!gifClicked)\r\n                      showPanel(false);\r\n                    }}\r\n                    id=\"clear\"\r\n                    type=\"button\"\r\n                    title=\"Emoji\"\r\n                    className=\"btn btn-emoji\"\r\n                  >\r\n                    <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">\r\n                      GIF\r\n                  </span>\r\n                  </button>\r\n\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"desktop\"\r\n                    className=\"form-control rounded-0 border-1 py-4\"\r\n                    value={message}\r\n                    onChange={(e) => {\r\n                      if (emojiClicked) { showPanel(false); }\r\n                      if (gifClicked) { setGifPanel(false); }\r\n\r\n                      setMessage(e.target.value)\r\n                    }\r\n                    }\r\n                    autoComplete=\"off\"\r\n                    autoFocus=\"on\"\r\n                    placeholder=\"type your message here...\"\r\n                  />\r\n                  <div className=\"input-group-append\" id=\"desktop\">\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                  </div>\r\n\r\n                </div>\r\n                <div className=\"m-send\" id=\"mobile\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control rounded-0 border-1 py-4\"\r\n                    value={message}\r\n                    onChange={(e) => {\r\n                      if (emojiClicked) { showPanel(false); }\r\n                      if (gifClicked) { setGifPanel(false); }\r\n\r\n                      setMessage(e.target.value)\r\n                    }\r\n                    }\r\n                    autoComplete=\"off\"\r\n                    autoFocus=\"on\"\r\n                    placeholder=\"type your message here...\"\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                  </div></div>\r\n\r\n              </form></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["ChatBox","_ref","index","message","time","otherUserMsg","userName","classes","type","React","src","alt","style","height","messageBody","className","color","fontWeight","key","users","roomName","id","concat","map","user","charAt","toUpperCase","s","slice","_React$createElement","location","_useState","useState","_useState2","_slicedToArray","userID","setUserID","_useState3","_useState4","setRoomName","_useState5","_useState6","toggle","setToggle","_useState7","_useState8","messages","setMessages","_useState9","_useState10","setMessage","_useState11","_useState12","setUsers","_useState13","_useState14","emojiClicked","showPanel","_useState15","_useState16","gifClicked","setGifPanel","messagesEndRef","useRef","socketRef","addToast","useToasts","history","useHistory","showToast","useCallback","msg","appearance","autoDismiss","useEffect","current","io","emit","state","on","oldMsgs","_toConsumableArray","img","sendFile","e","data","reader","FileReader","onload","evt","body","target","result","toString","fileName","name","readAsDataURL","readThenSendFile","files","scrollIntoView","behavior","Sidebar","onClick","title","push","Date","toLocaleString","hour","minute","hour12","ref","Picker","onEmojiClick","event","emojiObject","res","emoji","ReactGiphySearchbox","gifPerPage","libray","gifListHeight","masonryConfig","mq","columns","imageWidth","gutter","_defineProperty","item","console","log","images","preview_gif","url","sendGif","onSubmit","preventDefault","messageObject","onChange","autoComplete","accept","autoFocus","placeholder","role","value"],"sourceRoot":""}